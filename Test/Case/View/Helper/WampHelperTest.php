<?php

/**
 * This file is part of Ratchet for CakePHP.
 *
 ** (c) 2012 - 2013 Cees-Jan Kiewiet
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

App::uses('View', 'View');
App::uses('WampHelper', 'Ratchet.View/Helper');
App::uses('HtmlHelper', 'View/Helper');
App::uses('AssetCompressHelper', 'AssetCompress.View/Helper');


class WampHelperTest extends CakeTestCase {

/**
 * start a test
 *
 * @return void
 **/
	public function setUp() {
		parent::setUp();

		$controller = null;
		$request = new CakeRequest(null, false);
		$request->webroot = '';
		$this->view = new View($controller);
		$this->view->request = $request;
		$this->Helper = new WampHelper($this->view, array('noconfig' => true));
		$this->Helper->Html = $this->getMock('HtmlHelper', array('scriptBlock'), array($this->view));
		$this->Helper->AssetCompress = $this->getMock('AssetCompressHelper', array('script'), array($this->view, array('noconfig' => true)));

		Router::reload();

		Configure::write('Ratchet', array(
			'Client' => array(
				'retryDelay' => 5000, // Not the best option but it speeds up development
				'maxRetries' => 25, // Keep on trying! (Also not the best option)
			),
			'Connection' => array(
				'external' => array(
					'hostname' => 'localhost',
					'port' => 80,
					'path' => 'websocket',
					'secure' => false,
				),
			),
		));
	}

/**
 * end a test
 *
 * @return void
 **/
	public function tearDown() {
		parent::tearDown();
		unset($this->Helper);
	}

/**
 * test the script includes generated by init
 *
 * @return void
 */
	public function testInit() {
		$expectedScriptBlock = "WEB_SOCKET_SWF_LOCATION = \"http://localhost/Ratchet/swf/WebSocketMain.swf\";\nvar cakeWamp = window.cakeWamp || {};\ncakeWamp.options = {retryDelay: 5000,maxRetries: 25};\nvar wsuri = \"ws://localhost:80/websocket\";";
		$this->Helper->Html->expects($this->once())
			->method('scriptBlock')
			->with($expectedScriptBlock, $this->equalTo(array(
				'inline' => false,
			)));

		$this->Helper->AssetCompress->expects($this->once())
			->method('script')
			->with($this->equalTo('Ratchet.wamp'), $this->equalTo(array('block' => 'script')));

		$this->Helper->init();
	}

/**
 * test the script includes generated by init when the keepalive setting is active
 *
 * @return void
 */
	public function testInitKeepAlive() {
		Configure::write('Ratchet.Connection.keepaliveInterval', 21);
		$expectedScriptBlockA = "WEB_SOCKET_SWF_LOCATION = \"http://localhost/Ratchet/swf/WebSocketMain.swf\";\nvar cakeWamp = window.cakeWamp || {};\ncakeWamp.options = {retryDelay: 5000,maxRetries: 25};\nvar wsuri = \"ws://localhost:80/websocket\";";
		$expectedScriptBlockB = "cakeWamp.subscribe('Rachet.connection.keepAlive', function (topic, event) {});";

		$this->Helper->Html->expects($this->at(0))
			->method('scriptBlock')
			->with($expectedScriptBlockA, $this->equalTo(array(
				'inline' => false,
			)));
		$this->Helper->Html->expects($this->at(1))
			->method('scriptBlock')
			->with($expectedScriptBlockB, $this->equalTo(array(
				'inline' => false,
			)));

		$this->Helper->AssetCompress->expects($this->once())
			->method('script')
			->with($this->equalTo('Ratchet.wamp'), $this->equalTo(array('block' => 'script')));

		$this->Helper->init();
	}

}
